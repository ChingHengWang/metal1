# Customized for Angelbot
#max_obstacle_height: 0.60  # assume something like an arm is mounted on top of the robot

#This parameters set the maximum obstacle range. In this case, the robot will only look at obstacles within 2.5 meters in front of robot
obstacle_range: 2.0 #2.5 --modified 20160707

#This parameter helps robot to clear out space in front of it upto 3.0 meters away given a sensor reading
raytrace_range: 2.5 #3.0 --modified 20160707

#If the robot is circular, we can define the robot radius, otherwise we need to mention the robot footprint
robot_radius: 0.15 # Angelbot (roughly) --modified 20160707
# footprint: [[x0, y0], [x1, y1], ... [xn, yn]]  # if the robot is not circular

#This parameter will actually inflate the obstacle up to this distance from the actual obstacle. This can be taken as a tolerance value of obstacle. The cost of map will be same as the actual obstacle up to the inflated value.
inflation_radius: 0.60  # max. distance from an obstacle at which costs are incurred for planning paths.

#This factor is used for computing cost during inflation
cost_scaling_factor: 1.0  # exponential rate at which the obstacle cost drops off (default: 10)


#We can either choose map type as voxel which will give a 3D view of the world, or the other type, costmap which is a 2D view of the map.
# voxel map configuration; z-voxels 0 are filled by bumpers and 1 by laser scan (kinect)
#map_type: costmap
#transform_tolerance: 5 # seconds

#This is the z_origin of the map if it voxel
#origin_z: 0.0
#z_resolution: 0.2

#No. of voxel in a vertical column
#z_voxels: 2

#This flag set whether we need map for visualization purpose
#publish_voxel_map: false

#A list of observation source in which we get scan data and its parameters
observation_sources: rplidar_scan 

#The list of scan, which mention, data type of scan as LaserScan, marking and clearing indicate whether the laser data is used for marking and clearing costmap.
# scan: {data_type: LaserScan, topic: scan, marking: true, clearing: true, min_obstacle_height: 0.25, max_obstacle_height: 0.35}
# Our lasers (Xtion and fake) either needs to publish a height, or set min_obstacle_height to 0.0:
# http://wiki.ros.org/navigation/Troubleshooting#Missing_Obstacles_in_Costmap2D
# Note taht the max_obstacle_height is very important too!
rplidar_scan: {sensor_frame: angelbot_rplidar, data_type: LaserScan, topic: /scan, marking: true, clearing: true, expected_update_rate: 0.4, inf_is_valid: true}
#scan: {data_type: LaserScan, topic: scan, marking: true, clearing: true, min_obstacle_height: 0.0, max_obstacle_height: 3}
## Can we just set up two of these here?
#bump: {data_type: PointCloud2, topic: mobile_base/sensors/bumper_pointcloud, marking: true, clearing: false, min_obstacle_height: 0.0, max_obstacle_height: 0.15}
